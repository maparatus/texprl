maybespaces<content> {
 space* content space* 
}

commaSep<content> {
  "" | content ("," content)* ("," space*)*
}

@top Program { space* expression space* }

@precedence {
  Lookup,
  Number,
  Bool,
  braces,
  divtimes @left,
  plusminus @left
}

FunctionExpr {
  functionName "(" commaSep<maybespaces<expression>> ")"
}

List { "[" commaSep<maybespaces<expression>> "]" }

expression {
  braces |
  Lookup |
  Bool |
  String |
  Number |
  BinaryExpression |
  FunctionExpr |
  List
}

braces {
  "(" BinaryExpression ")" |
  "(" Number ")"
}

BinaryExpression {
  expression space* !divtimes  (Div | Times)  space* expression |
  expression space* !plusminus (Plus | Minus) space* expression
}

@tokens {
  Bool { "true" | "false" }
  functionName { $[a-z_]+ ($[a-z_0-9]+)* }
  Integer { ($[-])* std.digit+ }
  Float { ($[-])* std.digit+ "." std.digit+ }
  Number { Integer | Float }
  Div { "/" }
  Plus { "+" }
  Times { "*" }
  Minus { "-" }
  String { '"' (!["\\] | "\\" _)* '"' }
  space { std.whitespace+ }
  Lookup { "#" ($[a-z_0-9]+)* }

  @precedence { Lookup, Number, Bool, functionName }
}
