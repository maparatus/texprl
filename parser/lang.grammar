@skip {
  space
}

commaSep<expr> { commaSep1<expr>? }
commaSep1<expr> { expr ("," expr?)* }

@top Program { expression }

@precedence {
  binaryExpressionWrap,
  BinaryExpression,
  expression,
  Lookup,
  Number,
  Bool,
  divtimes @left,
  plusminus @left
}

FunctionExpr {
  functionStart commaSep<expression> functionEnd
}

List { "[" commaSep<expression> "]" }

@skip {} {
  String { stringStart (stringContent)* stringEnd }
}

expression {
  Lookup |
  Bool |
  String |
  Number |
  binaryExpressionWrap |
  BinaryExpression |
  FunctionExpr |
  List
}

dt {
  (Div | Times)
}

pm {
  (Plus | Minus)
}

binaryExpressionWrap {
  "(" BinaryExpression ")"
}

BinaryExpression {
  expression !divtimes  dt expression |
  expression !plusminus pm expression
}

@tokens {
  Bool { "true" | "false" }
  functionStart { $[a-z_]+ ($[a-z_0-9]+)* "(" }
  functionEnd { ")" }
  Integer { ($[-])* std.digit+ }
  Float { ($[-])* std.digit+ "." std.digit+ }
  Number { Integer | Float }
  Div { "/" }
  Plus { "+" }
  Times { "*" }
  Minus { "-" }
  stringStart { '"' }
  stringContent { !["\\\n]* "\n" | !["\\\n]+ }
  stringEnd { '"' }
  space { std.whitespace+ }
  Lookup { "#" ($[a-z_0-9]+)* }

  @precedence { Lookup, Number, Bool }
}
